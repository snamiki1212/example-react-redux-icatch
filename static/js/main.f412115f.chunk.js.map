{"version":3,"sources":["lib/generator.js","components/Demo.js","containers/DemoContainer.js","containers/Controller.js","actions/index.jsx","components/Output.js","App.js","serviceWorker.js","reducers/index.js","reducers/backgroundColor.js","reducers/stringColor.js","reducers/inputText.js","index.js"],"names":["generate","node","document","getElementById","domtoimage","toPng","then","dataUrl","img","Image","src","style","border","appendChild","catch","error","console","Demo","_ref","stringColor","backgroundColor","inputText","react_default","a","createElement","margin","id","height","width","borderRadius","color","display","flexDirection","justifyContent","onClick","log","split","map","item","i","padding","key","connect","state","updateBackgroundColor","updateStringColor","updateInputText","dispatch","hex","type","text","colorPickerCSS","textAlign","flexWrap","lib","onChangeComplete","value","onChange","e","currentTarget","Output","App","className","DemoContainer","marginTop","containers_Controller","components_Output","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","store","createStore","rootReducers","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f412115f.chunk.js","sourcesContent":["import domtoimage from 'dom-to-image';\n\nexport const GENERATER_INPUT_ID = 'generator-input-id';\nexport const GENERATER_OUTPUT_ID = 'generator-output-id'\n\nconst generate = () => {\n  const inputId = GENERATER_INPUT_ID;\n  const node = document.getElementById(inputId);\n\n  domtoimage.toPng(node)\n    .then(dataUrl => {\n      const img = new Image();\n      img.src = dataUrl;\n      img.style.border = 'dashed 1px black';\n\n      document.getElementById(GENERATER_OUTPUT_ID).appendChild(img);\n    })\n    .catch(error => {\n      console.error('oops, something went wrong!', error);\n    });\n}\n\nexport default generate;","import React from 'react';\nimport { GENERATER_INPUT_ID } from '../lib/generator';\n\nconst Demo = ({\n  stringColor,\n  backgroundColor,\n  inputText,\n}) => {\n  return(\n    <div>\n      <p\n        style={{backgroundColor: 'lightgray', margin: '10px',}}\n      >↓↓デモ↓↓</p>\n      <div\n        id={GENERATER_INPUT_ID}\n        style={{\n          height: '200px',\n          width: '400px',\n          borderRadius: '10px',\n          backgroundColor: backgroundColor,\n          color: stringColor,\n\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n        }}\n        onClick={() => console.log(backgroundColor)}\n      >\n        {inputText.split ('\\n').map ((item, i) => <p style={{padding: 0, margin: 0 }} key={i}>{item}</p>)}\n      </div>\n    </div>\n  );\n};\n\nexport default Demo;","import { connect } from 'react-redux';\nimport Demo from '../components/Demo';\n\nconst mapStateToProps = (state) => ({\n  backgroundColor: state.updateBackgroundColor,\n  stringColor: state.updateStringColor,\n  inputText: state.updateInputText,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // \n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Demo)","import React from 'react';\nimport { connect } from 'react-redux';\nimport generate from '../lib/generator';\nimport { TwitterPicker } from 'react-color';\nimport { updateBackgroundColor, updateStringColor, updateInputText } from '../actions';\n\nconst Controller = ({\n  // disaptch call-backs\n  updateStringColor,\n  updateBackgroundColor,\n  updateInputText,\n\n  // values\n  stringColor,\n  backgroundColor,\n  inputText,\n}) => {\n  const colorPickerCSS = {\n    textAlign: 'left',\n    padding: '10px',\n  };\n\n  return(\n    <div style={{\n      backgroundColor: 'lightgray',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      margin: '10px',\n    }} >\n      <div style={colorPickerCSS}>\n        <p>背景色(BackgroundColor)</p>\n        <TwitterPicker\n          color={backgroundColor}\n          onChangeComplete={(color) => updateBackgroundColor(color.hex)}\n        />\n      </div>\n      <textarea\n        value={inputText}\n        type='textarea'\n        onChange={(e) => updateInputText(e.currentTarget.value)}\n        style={{padding: '10px', }}\n      />\n      <div style={colorPickerCSS}>\n        <p>文字色(Color)</p>\n        <TwitterPicker\n          color={stringColor}\n          onChangeComplete={(color) => updateStringColor(color.hex)}\n        />\n      </div>\n\n      <br />\n      <button\n        style={{ width: '100%', padding: '10px', }}\n        onClick={() => generate()}\n      >\n        CREATE\n      </button>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return ({\n    backgroundColor: state.updateBackgroundColor,\n    stringColor: state.updateStringColor,\n    inputText: state.updateInputText,\n  })\n\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateBackgroundColor: (hex) => dispatch(updateBackgroundColor(hex)),\n  updateStringColor: (hex) => dispatch(updateStringColor(hex)),\n  updateInputText: (text) => dispatch(updateInputText(text)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Controller);","export const updateBackgroundColor = (hex) => ({\n  type: \"UPDATE_BACKGROUND_COLOR\",\n  hex\n})\n\nexport const updateStringColor = (hex) => ({\n  type: \"UPDATE_STRING_COLOR\",\n  hex\n})\n\nexport const updateInputText = (text) => ({\n  type: 'UPDATE_INPUT_TEXT',\n  text\n})","import React from 'react';\nimport { GENERATER_OUTPUT_ID } from '../lib/generator';\n\nconst Output = () => {\n  return(\n    <div id={GENERATER_OUTPUT_ID}>\n      <p >↓↓</p>\n    </div>\n  );\n};\n\nexport default Output;","import React from 'react';\nimport './App.css';\nimport DemoContainer from './containers/DemoContainer';\nimport Controller from './containers/Controller'\nimport Output from './components/Output';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DemoContainer\n        style={{ marginTop: '200px' }}\n      />\n      <Controller />\n      <Output />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { updateBackgroundColor } from './backgroundColor';\nimport { updateStringColor } from './stringColor';\nimport { updateInputText } from './inputText';\n\nexport default combineReducers({\n  updateBackgroundColor,\n  updateStringColor,\n  updateInputText,\n});","export const updateBackgroundColor = (state = '', action) => {\n  switch(action.type){\n    case \"UPDATE_BACKGROUND_COLOR\":\n      return action.hex;\n    default:\n      return state;\n  }\n}\n","export const updateStringColor = (state = '', action) => {\n  switch(action.type){\n    case \"UPDATE_STRING_COLOR\":\n      return action.hex;\n    default:\n      return state;\n  }\n}\n","export const updateInputText = (state = \"Hi, I'm Nash.\\nLet's create IMG🚀\", action) => {\n  switch(action.type){\n    case \"UPDATE_INPUT_TEXT\":\n      return action.text;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducers from './reducers';\n\nconst store = createStore(rootReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n    , document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}